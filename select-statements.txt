*Exercises*

1. Write out a generic SELECT statement.

  SELECT column1 
  FROM table1
  WHERE column1 LIKE '%items%';

2. Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.

  SAN - SELECT
  FRANCISCO - FROM 
  WINTER - WHERE

3. Given this dogs table, write queries to select the following pieces of data:

  Display the name, gender, and age of all dogs that are part Labrador.
	SELECT name, gender, age
	FROM dogs
	WHERE breed LIKE '%labrador%';
  Display the ids of all dogs that are under 1 year old.
	SELECT id
	FROM dogs
	WHERE age < 1;
  Display the name and age of all dogs that are female and over 35lbs.
	SELECT name, age 
	FROM dogs
	WHERE gender='F'
	AND weight > 35;
  Display all of the information about all dogs that are not Shepherd mixes.
	SELECT *
	FROM dogs
	WHERE breed NOT LIKE '%shepherd%'
  Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.
	SELECT id, age, weight, breed
	FROM dogs
	WHERE weight > 60 
	OR breed = 'great dane';

4. Given this cats table, what records are returned from these queries?

  SELECT name, adoption_date FROM cats;
	Returns: 
		('Mushi', '2016-03-22'),
		('Seashell', NULL),
		('Azul', '2016-04-17'), 
		('Victoire', '2016-09-01'),
		('Nala', NULL);

  SELECT name, age FROM cats;
	Returns: 
		('Mushi', 1),
		('Seashell', 7),
		('Azul', 3), 
		('Victoire', 7),
		('Nala', 1);

5. From the cats table, write queries to select the following pieces of data.

  Display all the information about all of the available cats.

	SELECT *
	FROM cats;
	
  Choose one cat of each age to show to potential adopters.
	
	SELECT DISTINCT age
	FROM cats;

  Find all of the names of the cats, so you don’t choose duplicate names for new cats.

	SELECT name
	FROM cats;

6. List each comparison operator and explain when you would use it. Include a real world example for each.
  < - To find number less than specified number; ex: find all dog litters that are less than 6.
  > - To find number greater than specified number; ex: find all classes sizes that are greater than 25 people. 
  <= - To find a number that is less than or equal to specified number; ex: find product inventory that is less than or equal to 60 items.
  >= - To find a number greater than or equal to specified number; ex: find cars in a lot that are greater than year 1999.
  != - To find all data (numbers or strings) that are not equal to specified data; ex: find all people who are not in the freshman class.
  = - To find all data (numbers or strings) that are equal to specified data; ex: find all people with the last name 'Wilson'.
  LIKE - To find all strings that are like the partial string specified; ex: find all cities that start with 'New'.
  BETWEEN - To find a value that is greater than something and less than something; ex: find all employees who started working with a company between 2015 and 2017. 
  IS DISTINCT FROM - To find a value that is not equal to something; it's similar to <> but can be used to evaluate null; ex: find all neighbors on a block who don't have a political sign in their yard.
  IS TRUE / IS FALSE - To evaluate if a value is true or false but can also evaluate a null value; ex: find which roommates have paid utilities for the month;
  IS NULL - To check if a value is null, or not null; ex: find which patrons haven't returned their books. 
  AND - To check if both expressions are true. If so, it will return what is evaluated; ex: check which employees have accident insurance and life insurance.
  OR - To check if one or another expression is true; ex: find which customers ordered french fries or a milk shake. 

7. From the cats table, what data is returned from these queries?

  SELECT name FROM cats WHERE gender = ‘F’;
	Returns:
	  ('Seashell'),
	  ('Nala');
  SELECT name FROM cats WHERE age <> 3;
	Returns: 
	  ('Mushi'),
	  ('Seashell'), 
	  ('Victoire'), 
	  ('Nala');
  SELECT ID FROM cats WHERE name != ‘Mushi’ AND gender = ‘M’;
	Returns:
	  (3), 
	  (4);



