*Exercises*

1. How do you find related data held in two separate data tables?
	Using JOIN statements 

2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. Give a real-world example for each.

	INNER JOIN compares the data between two columns and only displays the data that matches.

		Example: Compare students' names between two classes to find if students have the same names in each class. It will display only the matching names. 

	LEFT OUTER JOIN compares data between two columns and displays matching data as well as the rest of the data in the left table that doesn't match data in the right table. 

		Example: Compare students' names between two classes to find if students have the same names in each class in addition to displaying names of students for Class 2 that that don't match any in Class 1. 

	RIGHT OUTER JOIN compares data between two columns and displays matching data as well as the rest of the data in the right table that doesn't match data in the left table. 

		Example: Compare students' names between two classes to find if students have the same names in each class in addition to displaying names of students for Class 1 that that don't match any in Class 2. 

3. Define primary key and foreign key. Give a real-world example for each.

	A primary key is the unique key for each row in a table. A foreign key is a key that that is not the unique identifier of a row but can be matched to the primary key of another table. Example: There are two tables of data: one with information about each flight that departed from an airport (Flight ID, Company, Destination) and another with passenger information (Passenger ID, Name, Flight ID). The flight ID is an example of a primary key as it relates to the flight table but is an example of a foreign key as it relates to the passenger table. 

4. Define aliasing.
	
	The process of simplifying SQL commands such that the SELECT statement uses an abbreviation for a table that is then specified in the FROM and JOIN statements. It allows a developer to write less code. 

5. Change this query so that you are using aliasing:

	SELECT p.name, c.salary, c.vacation_days 
	FROM professor AS p
	JOIN compensation AS c
	ON p.id = c.professor_id;

6. Why would you use a NATURAL JOIN? Give a real-world example.

	A NATURAL JOIN is used to find all shared columns between input tables; it's shorthand for using USING and listing common column names. A NATURAL JOIN could be used to find all passengers on an airplane and the dietary restriction meal code they've chosen for their flight. The NATURAL JOIN will find the column in the passenger table, meal list table and a meal inventory table and allow us to combine data using the matching column. 

7. Using this Employee schema and data, write queries to find the following information:

	List all employees and all shifts.

		SELECT employees.name, shifts
 		  FROM scheduled_shifts
 		  JOIN shifts ON shifts.id = scheduled_shifts.shift_id
 		  JOIN employees ON employees.id = scheduled_shifts.employee_id;

8. Using this Adoption schema and data, please write queries to retrieve the following information and include the results:

	Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.

		SELECT volunteers.first_name, volunteers.last_name, dogs.name
  		  FROM volunteers 
  		  LEFT OUTER JOIN dogs ON volunteers.foster_dog_id = dogs.id;
	

	The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail" social media promotion which posts recent successful adoptions.

		SELECT cats.name, adopters.first_name, cat_adoptions.date
  		  FROM cat_adoptions
  		  JOIN cats ON cat_adoptions.cat_id = cats.id
  		  JOIN adopters ON cat_adoptions.adopter_id = adopters.id
  		  WHERE cat_adoptions.date > CURRENT_DATE - INTERVAL '31 DAYS';
	

	Create a list of adopters who have not yet chosen a dog to adopt. 

		SELECT adopters.first_name, dog_adoptions.date
		  FROM dog_adoptions
   		  RIGHT OUTER JOIN adopters ON adopters.id = dog_adoptions.adopter_id
		  WHERE dog_adoptions.adopter_id is null;

	Lists of all cats and all dogs who have not been adopted.

		SELECT cats.name, cat_adoptions.date
		  FROM cat_adoptions
   		  RIGHT OUTER JOIN cats ON cat_adoptions.cat_id = cats.id
		  WHERE cat_adoptions.adopter_id is null;

		SELECT dogs.name, dog_adoptions.date
		  FROM dog_adoptions
   		  RIGHT OUTER JOIN dogs ON dog_adoptions.dog_id = dogs.id
    		  WHERE dog_adoptions.adopter_id is null;

	The name of the person who adopted Rosco.

		SELECT adopters.first_name
  		  FROM dog_adoptions
  		  JOIN adopters ON dog_adoptions.adopter_id = adopters.id;

9. Using this Library schema and data, write queries applying the following scenarios and include the results:

To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".

	SELECT patrons.name, holds.rank
	  FROM holds 
    	  JOIN patrons ON patrons.id = holds.patron_id
    	  JOIN books on books.isbn = holds.isbn
    	  WHERE books.title = 'Advanced Potion-Making'
    	  ORDER BY holds.rank;

List all of the library patrons. If they have one or more books checked out, list the books with the patrons.

	SELECT patrons.name, books.title, transactions.checked_in_date
  	  FROM transactions
  	  JOIN patrons ON transactions.patron_id = patrons.id
  	  JOIN books ON transactions.isbn = books.isbn;






